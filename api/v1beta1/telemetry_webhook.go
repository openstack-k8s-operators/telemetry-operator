/*
Copyright 2022.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

//
// Generated by:
//
// operator-sdk create webhook --group telemetry --version v1beta1 --kind Telemetry --programmatic-validation --defaulting
//

package v1beta1

import (
	"fmt"
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	logf "sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/webhook"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
	apierrors "k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/util/validation/field"
	topologyv1 "github.com/openstack-k8s-operators/infra-operator/apis/topology/v1beta1"
)

// TelemetryDefaults -
type TelemetryDefaults struct {
	CentralContainerImageURL        string
	ComputeContainerImageURL        string
	NotificationContainerImageURL   string
	SgCoreContainerImageURL         string
	ProxyContainerImageURL          string
	IpmiContainerImageURL           string
	KsmContainerImageURL            string
	MysqldExporterContainerImageURL string
	AodhAPIContainerImageURL        string
	AodhEvaluatorContainerImageURL  string
	AodhNotifierContainerImageURL   string
	AodhListenerContainerImageURL   string
}

var telemetryDefaults TelemetryDefaults

// log is for logging in this package.
var telemetrylog = logf.Log.WithName("telemetry-resource")

// SetupTelemetryDefaults - initialize Telemetry spec defaults for use with either internal or external webhooks
func SetupTelemetryDefaults(defaults TelemetryDefaults) {
	telemetryDefaults = defaults
	telemetrylog.Info("Telemetry defaults initialized", "defaults", defaults)
}

// SetupWebhookWithManager sets up the webhook with the Manager
func (r *Telemetry) SetupWebhookWithManager(mgr ctrl.Manager) error {
	return ctrl.NewWebhookManagedBy(mgr).
		For(r).
		Complete()
}

//+kubebuilder:webhook:path=/mutate-telemetry-openstack-org-v1beta1-telemetry,mutating=true,failurePolicy=fail,sideEffects=None,groups=telemetry.openstack.org,resources=telemetries,verbs=create;update,versions=v1beta1,name=mtelemetry.kb.io,admissionReviewVersions=v1

var _ webhook.Defaulter = &Telemetry{}

// Default implements webhook.Defaulter so a webhook will be registered for the type
func (r *Telemetry) Default() {
	telemetrylog.Info("default", "name", r.Name)

	r.Spec.Default()
}

// Default - set defaults for this Telemetry spec
func (spec *TelemetrySpec) Default() {
	if spec.Ceilometer.CeilometerSpec.CentralImage == "" {
		spec.Ceilometer.CeilometerSpec.CentralImage = telemetryDefaults.CentralContainerImageURL
	}
	if spec.Ceilometer.CeilometerSpec.ComputeImage == "" {
		spec.Ceilometer.CeilometerSpec.ComputeImage = telemetryDefaults.ComputeContainerImageURL
	}
	if spec.Ceilometer.CeilometerSpec.IpmiImage == "" {
		spec.Ceilometer.CeilometerSpec.IpmiImage = telemetryDefaults.IpmiContainerImageURL
	}
	if spec.Ceilometer.CeilometerSpec.NotificationImage == "" {
		spec.Ceilometer.CeilometerSpec.NotificationImage = telemetryDefaults.NotificationContainerImageURL
	}
	if spec.Ceilometer.CeilometerSpec.SgCoreImage == "" {
		spec.Ceilometer.CeilometerSpec.SgCoreImage = telemetryDefaults.SgCoreContainerImageURL
	}
	if spec.Ceilometer.CeilometerSpec.ProxyImage == "" {
		spec.Ceilometer.CeilometerSpec.ProxyImage = telemetryDefaults.ProxyContainerImageURL
	}
	if spec.Ceilometer.CeilometerSpec.KSMImage == "" {
		spec.Ceilometer.CeilometerSpec.KSMImage = telemetryDefaults.KsmContainerImageURL
	}
	if spec.Ceilometer.CeilometerSpec.MysqldExporterImage == "" {
		spec.Ceilometer.CeilometerSpec.MysqldExporterImage = telemetryDefaults.MysqldExporterContainerImageURL
	}
	if spec.Autoscaling.AutoscalingSpec.Aodh.APIImage == "" {
		spec.Autoscaling.AutoscalingSpec.Aodh.APIImage = telemetryDefaults.AodhAPIContainerImageURL
	}
	if spec.Autoscaling.AutoscalingSpec.Aodh.EvaluatorImage == "" {
		spec.Autoscaling.AutoscalingSpec.Aodh.EvaluatorImage = telemetryDefaults.AodhEvaluatorContainerImageURL
	}
	if spec.Autoscaling.AutoscalingSpec.Aodh.NotifierImage == "" {
		spec.Autoscaling.AutoscalingSpec.Aodh.NotifierImage = telemetryDefaults.AodhNotifierContainerImageURL
	}
	if spec.Autoscaling.AutoscalingSpec.Aodh.ListenerImage == "" {
		spec.Autoscaling.AutoscalingSpec.Aodh.ListenerImage = telemetryDefaults.AodhListenerContainerImageURL
	}
}

// Default - set defaults for this Telemetry spec core
// NOTE: only this version gets called by the Controlplane Webhook
func (spec *TelemetrySpecCore) Default() {
	spec.Autoscaling.Aodh.Default()
}

// TODO(user): change verbs to "verbs=create;update;delete" if you want to enable deletion validation.
//+kubebuilder:webhook:path=/validate-telemetry-openstack-org-v1beta1-telemetry,mutating=false,failurePolicy=fail,sideEffects=None,groups=telemetry.openstack.org,resources=telemetries,verbs=create;update,versions=v1beta1,name=vtelemetry.kb.io,admissionReviewVersions=v1

var _ webhook.Validator = &Telemetry{}

// ValidateCreate implements webhook.Validator so a webhook will be registered for the type
func (r *Telemetry) ValidateCreate() (admission.Warnings, error) {
	telemetrylog.Info("validate create", "name", r.Name)
	var allErrs field.ErrorList
	basePath := field.NewPath("spec")

	allErrs = r.Spec.ValidateCreate(basePath, r.Namespace)
	if len(allErrs) != 0 {
		return nil, apierrors.NewInvalid(
			schema.GroupKind{Group: "telemetry.openstack.org", Kind: "Telemetry"},
			r.Name, allErrs)
	}

	return nil, nil
}

func (r TelemetrySpec) ValidateCreate(basePath *field.Path, namespace string) field.ErrorList {
	var allErrs field.ErrorList

	allErrs = append(allErrs, r.ValidateTelemetryTopology(basePath, namespace)...)
	return allErrs
}

func (r TelemetrySpecCore) ValidateCreate(basePath *field.Path, namespace string) field.ErrorList {
	var allErrs field.ErrorList
	allErrs = append(allErrs, r.ValidateTelemetryTopology(basePath, namespace)...)
	return allErrs
}

// ValidateUpdate implements webhook.Validator so a webhook will be registered for the type
func (r *Telemetry) ValidateUpdate(old runtime.Object) (admission.Warnings, error) {
	telemetrylog.Info("validate update", "name", r.Name)
	var allErrs field.ErrorList
	basePath := field.NewPath("spec")

	oldTelemetry, ok := old.(*Telemetry)
	if !ok || oldTelemetry == nil {
		return nil, apierrors.NewInternalError(fmt.Errorf("unable to convert existing object"))
	}

	allErrs = r.Spec.ValidateUpdate(oldTelemetry.Spec, basePath, r.Namespace)
	if len(allErrs) != 0 {
		return nil, apierrors.NewInvalid(
			schema.GroupKind{Group: "telemetry.openstack.org", Kind: "Telemetry"},
			r.Name, allErrs)
	}
	return nil, nil
}

func (r TelemetrySpec) ValidateUpdate(old TelemetrySpec, basePath *field.Path, namespace string) field.ErrorList {
	return r.ValidateCreate(basePath, namespace)
}

func (r TelemetrySpecCore) ValidateUpdate(old TelemetrySpec, basePath *field.Path, namespace string) field.ErrorList {
	var allErrs field.ErrorList
	allErrs = append(allErrs, r.ValidateTelemetryTopology(basePath, namespace)...)
	return allErrs
}

// ValidateDelete implements webhook.Validator so a webhook will be registered for the type
func (r *Telemetry) ValidateDelete() (admission.Warnings, error) {
	telemetrylog.Info("validate delete", "name", r.Name)

	// TODO(user): fill in your validation logic upon object deletion.
	return nil, nil
}

// ValidateTelemetryTopology - Returns an ErrorList if the Topology is referenced
// on a different namespace
func (spec *TelemetrySpecCore) ValidateTelemetryTopology(basePath *field.Path, namespace string) field.ErrorList {
	var allErrs field.ErrorList

	// When a TopologyRef CR is referenced, fail if a different Namespace is
	// referenced because is not supported
	allErrs = append(allErrs, topologyv1.ValidateTopologyRef(
		spec.TopologyRef, *basePath.Child("topologyRef"), namespace)...)

	// When a TopologyRef CR is referenced with an override to Aodh, fail
	// if a different Namespace is referenced because not supported
	aodhPath := basePath.Child("autoscaling").Child("aodh")
	allErrs = append(allErrs,
		spec.Autoscaling.Aodh.ValidateTopology(aodhPath, namespace)...)

	// When a TopologyRef CR is referenced with an override to Ceilometer,
	// fail if a different Namespace is referenced because not supported
	ceilPath := basePath.Child("ceilometer")
	allErrs = append(allErrs,
		spec.Ceilometer.ValidateTopology(ceilPath, namespace)...)

	return allErrs
}
// ValidateTelemetryTopology - Returns an ErrorList if the Topology is referenced
// on a different namespace
func (spec *TelemetrySpec) ValidateTelemetryTopology(basePath *field.Path, namespace string) field.ErrorList {
	var allErrs field.ErrorList

	// When a TopologyRef CR is referenced, fail if a different Namespace is
	// referenced because is not supported
	allErrs = append(allErrs, topologyv1.ValidateTopologyRef(
		spec.TopologyRef, *basePath.Child("topologyRef"), namespace)...)

	// When a TopologyRef CR is referenced with an override to Aodh, fail
	// if a different Namespace is referenced because not supported
	aodhPath := basePath.Child("autoscaling").Child("aodh")
	allErrs = append(allErrs,
		spec.Autoscaling.Aodh.ValidateTopology(aodhPath, namespace)...)

	// When a TopologyRef CR is referenced with an override to Ceilometer,
	// fail if a different Namespace is referenced because not supported
	ceilPath := basePath.Child("ceilometer")
	allErrs = append(allErrs,
		spec.Ceilometer.ValidateTopology(ceilPath, namespace)...)

	return allErrs
}
