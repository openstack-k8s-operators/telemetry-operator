apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: ceilometercentrals.telemetry.openstack.org
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: ceilometercomputes.telemetry.openstack.org
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.10.0
  creationTimestamp: null
  name: telemetries.telemetry.openstack.org
spec:
  group: telemetry.openstack.org
  names:
    kind: Telemetry
    listKind: TelemetryList
    plural: telemetries
    singular: telemetry
  scope: Namespaced
  versions:
  - name: v1beta1
    schema:
      openAPIV3Schema:
        description: Telemetry is the Schema for the telemetries API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: TelemetrySpec defines the desired state of Telemetry
            properties:
              customServiceConfig:
                default: '# add your customization here'
                description: CustomServiceConfig - customize the service config using
                  this parameter to change service defaults, or overwrite rendered
                  information using raw OpenStack config format. The content gets
                  added to to /etc/<service>/<service>.conf.d directory as custom.conf
                  file.
                type: string
              defaultConfigOverwrite:
                additionalProperties:
                  type: string
                description: 'ConfigOverwrite - interface to overwrite default config
                  files like e.g. logging.conf or policy.json. But can also be used
                  to add additional files. Those get added to the service config dir
                  in /etc/<service> . TODO: -> implement'
                type: object
              rabbitMqSecret:
                default: rabbitmq-default-user
                description: The needed values to connect to RabbitMQ
                type: string
            type: object
          status:
            description: TelemetryStatus defines the observed state of Telemetry
            properties:
              conditions:
                description: Conditions
                items:
                  description: Condition defines an observation of a API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase.
                      type: string
                    severity:
                      description: Severity provides a classification of Reason code,
                        so the current situation is immediately understandable and
                        could act accordingly. It is meant for situations where Status=False
                        and it should be indicated if it is just informational, warning
                        (next reconciliation might fix it) or an error (e.g. DB create
                        issue and no actions to automatically resolve the issue can/should
                        be done). For conditions where Status=Unknown or Status=True
                        the Severity should be SeverityNone.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase.
                      type: string
                  required:
                  - lastTransitionTime
                  - status
                  - type
                  type: object
                type: array
              hash:
                additionalProperties:
                  type: string
                description: Map of hashes to track e.g. job status
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: telemetry-operator-controller-manager
  namespace: openstack
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: telemetry-operator-leader-election-role
  namespace: openstack
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: telemetry-operator-manager-role
rules:
- apiGroups:
  - ansibleee.openstack.org
  resources:
  - openstackansibleees
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - keystone.openstack.org
  resources:
  - keystoneservices
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - telemetry.openstack.org
  resources:
  - ceilometercentrals
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - telemetry.openstack.org
  resources:
  - ceilometercentrals/finalizers
  verbs:
  - update
- apiGroups:
  - telemetry.openstack.org
  resources:
  - ceilometercentrals/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - telemetry.openstack.org
  resources:
  - ceilometercomputes
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - telemetry.openstack.org
  resources:
  - ceilometercomputes/finalizers
  verbs:
  - update
- apiGroups:
  - telemetry.openstack.org
  resources:
  - ceilometercomputes/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - telemetry.openstack.org
  resources:
  - telemetries
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - telemetry.openstack.org
  resources:
  - telemetries/finalizers
  verbs:
  - update
- apiGroups:
  - telemetry.openstack.org
  resources:
  - telemetries/status
  verbs:
  - get
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: telemetry-operator-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: telemetry-operator-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: telemetry-operator-leader-election-rolebinding
  namespace: openstack
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: telemetry-operator-leader-election-role
subjects:
- kind: ServiceAccount
  name: telemetry-operator-controller-manager
  namespace: openstack
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: telemetry-operator-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: telemetry-operator-manager-role
subjects:
- kind: ServiceAccount
  name: telemetry-operator-controller-manager
  namespace: openstack
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: telemetry-operator-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: telemetry-operator-proxy-role
subjects:
- kind: ServiceAccount
  name: telemetry-operator-controller-manager
  namespace: openstack
---
apiVersion: v1
data:
  controller_manager_config.yaml: "apiVersion: controller-runtime.sigs.k8s.io/v1alpha1\nkind:
    ControllerManagerConfig\nhealth:\n  healthProbeBindAddress: :8081\nmetrics:\n
    \ bindAddress: 127.0.0.1:8080\nwebhook:\n  port: 9443\nleaderElection:\n  leaderElect:
    true\n  resourceName: fa1814a2.openstack.org\n#   leaderElectionReleaseOnCancel
    defines if the leader should step down volume \n#   when the Manager ends. This
    requires the binary to immediately end when the\n#   Manager is stopped, otherwise,
    this setting is unsafe. Setting this significantly\n#   speeds up voluntary leader
    transitions as the new leader don't have to wait\n#   LeaseDuration time first.\n#
    \  In the default scaffold provided, the program ends immediately after \n#   the
    manager stops, so would be fine to enable this option. However, \n#   if you are
    doing or is intended to do any operation such as perform cleanups \n#   after
    the manager stops then its usage might be unsafe.\n#   leaderElectionReleaseOnCancel:
    true\n"
kind: ConfigMap
metadata:
  name: telemetry-operator-manager-config
  namespace: openstack
---
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: controller-manager
  name: telemetry-operator-controller-manager-metrics-service
  namespace: openstack
spec:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    control-plane: controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: controller-manager
  name: telemetry-operator-controller-manager
  namespace: openstack
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        image: registry.redhat.io/openshift4/ose-kube-rbac-proxy:v4.11
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        command:
        - /manager
        image: quay.io/openstack-k8s-operators/telemetry-operator:latest
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
      securityContext:
        runAsNonRoot: true
      serviceAccountName: telemetry-operator-controller-manager
      terminationGracePeriodSeconds: 10
