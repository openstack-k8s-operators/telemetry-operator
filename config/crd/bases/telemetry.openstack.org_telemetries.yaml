---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: telemetries.telemetry.openstack.org
spec:
  group: telemetry.openstack.org
  names:
    kind: Telemetry
    listKind: TelemetryList
    plural: telemetries
    singular: telemetry
  scope: Namespaced
  versions:
  - name: v1beta1
    schema:
      openAPIV3Schema:
        description: Telemetry is the Schema for the telemetry API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: TelemetrySpec defines the desired state of Telemetry
            properties:
              autoscaling:
                description: Autoscaling - Parameters related to the autoscaling service
                properties:
                  aodh:
                    description: Aodh spec
                    properties:
                      apiImage:
                        type: string
                      customServiceConfig:
                        default: '# add your customization here'
                        description: CustomServiceConfig - customize the service config
                          using this parameter to change service defaults, or overwrite
                          rendered information using raw OpenStack config format.
                          The content gets added to to /etc/<service>/<service>.conf.d
                          directory as custom.conf file.
                        type: string
                      databaseInstance:
                        description: MariaDB instance name Right now required by the
                          maridb-operator to get the credentials from the instance
                          to create the DB Might not be required in future
                        type: string
                      databaseUser:
                        default: aodh
                        description: Database user name Needed to connect to a database
                          used by aodh
                        type: string
                      defaultConfigOverwrite:
                        additionalProperties:
                          type: string
                        description: 'ConfigOverwrite - interface to overwrite default
                          config files like e.g. logging.conf or policy.json. But
                          can also be used to add additional files. Those get added
                          to the service config dir in /etc/<service> . TODO: -> implement'
                        type: object
                      evaluatorImage:
                        type: string
                      listenerImage:
                        type: string
                      memcachedInstance:
                        default: memcached
                        description: Memcached instance name.
                        type: string
                      networkAttachmentDefinitions:
                        description: NetworkAttachmentDefinitions list of network
                          attachment definitions the service pod gets attached to
                        items:
                          type: string
                        type: array
                      notifierImage:
                        type: string
                      override:
                        description: Override, provides the ability to override the
                          generated manifest of several child resources.
                        properties:
                          service:
                            description: Override configuration for the Service created
                              to serve traffic to the cluster.
                            properties:
                              endpointURL:
                                type: string
                              metadata:
                                description: EmbeddedLabelsAnnotations is an embedded
                                  subset of the fields included in k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta.
                                  Only labels and annotations are included.
                                properties:
                                  annotations:
                                    additionalProperties:
                                      type: string
                                    description: 'Annotations is an unstructured key
                                      value map stored with a resource that may be
                                      set by external tools to store and retrieve
                                      arbitrary metadata. They are not queryable and
                                      should be preserved when modifying objects.
                                      More info: http://kubernetes.io/docs/user-guide/annotations'
                                    type: object
                                  labels:
                                    additionalProperties:
                                      type: string
                                    description: 'Map of string keys and values that
                                      can be used to organize and categorize (scope
                                      and select) objects. May match selectors of
                                      replication controllers and services. More info:
                                      http://kubernetes.io/docs/user-guide/labels'
                                    type: object
                                type: object
                              spec:
                                description: OverrideServiceSpec is a subset of the
                                  fields included in https://pkg.go.dev/k8s.io/api@v0.26.6/core/v1#ServiceSpec
                                  Limited to Type, SessionAffinity, LoadBalancerSourceRanges,
                                  ExternalName, ExternalTrafficPolicy, SessionAffinityConfig,
                                  IPFamilyPolicy, LoadBalancerClass and InternalTrafficPolicy
                                properties:
                                  externalName:
                                    description: externalName is the external reference
                                      that discovery mechanisms will return as an
                                      alias for this service (e.g. a DNS CNAME record).
                                      No proxying will be involved.  Must be a lowercase
                                      RFC-1123 hostname (https://tools.ietf.org/html/rfc1123)
                                      and requires `type` to be "ExternalName".
                                    type: string
                                  externalTrafficPolicy:
                                    description: externalTrafficPolicy describes how
                                      nodes distribute service traffic they receive
                                      on one of the Service's "externally-facing"
                                      addresses (NodePorts, ExternalIPs, and LoadBalancer
                                      IPs). If set to "Local", the proxy will configure
                                      the service in a way that assumes that external
                                      load balancers will take care of balancing the
                                      service traffic between nodes, and so each node
                                      will deliver traffic only to the node-local
                                      endpoints of the service, without masquerading
                                      the client source IP. (Traffic mistakenly sent
                                      to a node with no endpoints will be dropped.)
                                      The default value, "Cluster", uses the standard
                                      behavior of routing to all endpoints evenly
                                      (possibly modified by topology and other features).
                                      Note that traffic sent to an External IP or
                                      LoadBalancer IP from within the cluster will
                                      always get "Cluster" semantics, but clients
                                      sending to a NodePort from within the cluster
                                      may need to take traffic policy into account
                                      when picking a node.
                                    type: string
                                  internalTrafficPolicy:
                                    description: InternalTrafficPolicy describes how
                                      nodes distribute service traffic they receive
                                      on the ClusterIP. If set to "Local", the proxy
                                      will assume that pods only want to talk to endpoints
                                      of the service on the same node as the pod,
                                      dropping the traffic if there are no local endpoints.
                                      The default value, "Cluster", uses the standard
                                      behavior of routing to all endpoints evenly
                                      (possibly modified by topology and other features).
                                    type: string
                                  ipFamilyPolicy:
                                    description: IPFamilyPolicy represents the dual-stack-ness
                                      requested or required by this Service. If there
                                      is no value provided, then this field will be
                                      set to SingleStack. Services can be "SingleStack"
                                      (a single IP family), "PreferDualStack" (two
                                      IP families on dual-stack configured clusters
                                      or a single IP family on single-stack clusters),
                                      or "RequireDualStack" (two IP families on dual-stack
                                      configured clusters, otherwise fail). The ipFamilies
                                      and clusterIPs fields depend on the value of
                                      this field. This field will be wiped when updating
                                      a service to type ExternalName.
                                    type: string
                                  loadBalancerClass:
                                    description: loadBalancerClass is the class of
                                      the load balancer implementation this Service
                                      belongs to. If specified, the value of this
                                      field must be a label-style identifier, with
                                      an optional prefix, e.g. "internal-vip" or "example.com/internal-vip".
                                      Unprefixed names are reserved for end-users.
                                      This field can only be set when the Service
                                      type is 'LoadBalancer'. If not set, the default
                                      load balancer implementation is used, today
                                      this is typically done through the cloud provider
                                      integration, but should apply for any default
                                      implementation. If set, it is assumed that a
                                      load balancer implementation is watching for
                                      Services with a matching class. Any default
                                      load balancer implementation (e.g. cloud providers)
                                      should ignore Services that set this field.
                                      This field can only be set when creating or
                                      updating a Service to type 'LoadBalancer'. Once
                                      set, it can not be changed. This field will
                                      be wiped when a service is updated to a non
                                      'LoadBalancer' type.
                                    type: string
                                  loadBalancerSourceRanges:
                                    description: 'If specified and supported by the
                                      platform, this will restrict traffic through
                                      the cloud-provider load-balancer will be restricted
                                      to the specified client IPs. This field will
                                      be ignored if the cloud-provider does not support
                                      the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/'
                                    items:
                                      type: string
                                    type: array
                                  sessionAffinity:
                                    description: 'Supports "ClientIP" and "None".
                                      Used to maintain session affinity. Enable client
                                      IP based session affinity. Must be ClientIP
                                      or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                                    type: string
                                  sessionAffinityConfig:
                                    description: sessionAffinityConfig contains the
                                      configurations of session affinity.
                                    properties:
                                      clientIP:
                                        description: clientIP contains the configurations
                                          of Client IP based session affinity.
                                        properties:
                                          timeoutSeconds:
                                            description: timeoutSeconds specifies
                                              the seconds of ClientIP type session
                                              sticky time. The value must be >0 &&
                                              <=86400(for 1 day) if ServiceAffinity
                                              == "ClientIP". Default value is 10800(for
                                              3 hours).
                                            format: int32
                                            type: integer
                                        type: object
                                    type: object
                                  type:
                                    description: 'type determines how the Service
                                      is exposed. Defaults to ClusterIP. Valid options
                                      are ExternalName, ClusterIP, NodePort, and LoadBalancer.
                                      "ClusterIP" allocates a cluster-internal IP
                                      address for load-balancing to endpoints. Endpoints
                                      are determined by the selector or if that is
                                      not specified, by manual construction of an
                                      Endpoints object or EndpointSlice objects. If
                                      clusterIP is "None", no virtual IP is allocated
                                      and the endpoints are published as a set of
                                      endpoints rather than a virtual IP. "NodePort"
                                      builds on ClusterIP and allocates a port on
                                      every node which routes to the same endpoints
                                      as the clusterIP. "LoadBalancer" builds on NodePort
                                      and creates an external load-balancer (if supported
                                      in the current cloud) which routes to the same
                                      endpoints as the clusterIP. "ExternalName" aliases
                                      this service to the specified externalName.
                                      Several other fields do not apply to ExternalName
                                      services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types'
                                    type: string
                                type: object
                            type: object
                        type: object
                      passwordSelector:
                        default:
                          aodhService: AodhPassword
                          database: AodhDatabasePassword
                        description: PasswordSelectors - Selectors to identify the
                          service from the Secret
                        properties:
                          aodhService:
                            default: AodhPassword
                            description: AodhService - Selector to get the aodh service
                              password from the Secret
                            type: string
                          database:
                            default: AodhDatabasePassword
                            description: Database - Selector to get the aodh database
                              user password from the Secret
                            type: string
                          service:
                            default: CeilometerPassword
                            description: Service - Selector to get the ceilometer
                              service password from the Secret
                            type: string
                        type: object
                      preserveJobs:
                        default: false
                        description: PreserveJobs - do not delete jobs after they
                          finished e.g. to check logs
                        type: boolean
                      rabbitMqClusterName:
                        default: rabbitmq
                        description: RabbitMQ instance name Needed to request a transportURL
                          that is created and used in Aodh
                        type: string
                      secret:
                        description: Secret containing OpenStack password information
                          for aodh
                        type: string
                      serviceUser:
                        default: aodh
                        description: ServiceUser - optional username used for this
                          service to register in keystone
                        type: string
                    required:
                    - apiImage
                    - databaseInstance
                    - evaluatorImage
                    - listenerImage
                    - memcachedInstance
                    - notifierImage
                    - secret
                    type: object
                  enabled:
                    default: false
                    description: Enabled - Whether OpenStack autoscaling service should
                      be deployed and managed
                    type: boolean
                  heatInstance:
                    default: heat
                    description: Heat instance name.
                    type: string
                  prometheus:
                    description: Specification of which prometheus to use for autoscaling
                    properties:
                      deployPrometheus:
                        default: false
                        description: Enables the deployment of autoscaling prometheus
                        type: boolean
                      host:
                        description: Host of user deployed prometheus if deployPrometheus
                          is set to false
                        type: string
                      port:
                        description: Port of user deployed prometheus if deployPrometheus
                          is set to false
                        format: int32
                        maximum: 65535
                        minimum: 1
                        type: integer
                    type: object
                required:
                - heatInstance
                type: object
              ceilometer:
                description: Ceilometer - Parameters related to the ceilometer service
                properties:
                  centralImage:
                    type: string
                  computeImage:
                    type: string
                  customServiceConfig:
                    default: '# add your customization here'
                    description: CustomServiceConfig - customize the service config
                      using this parameter to change service defaults, or overwrite
                      rendered information using raw OpenStack config format. The
                      content gets added to to /etc/<service>/<service>.conf.d directory
                      as custom.conf file.
                    type: string
                  defaultConfigOverwrite:
                    additionalProperties:
                      type: string
                    description: 'ConfigOverwrite - interface to overwrite default
                      config files like e.g. logging.conf or policy.json. But can
                      also be used to add additional files. Those get added to the
                      service config dir in /etc/<service> . TODO: -> implement'
                    type: object
                  enabled:
                    default: true
                    description: Enabled - Whether OpenStack Ceilometer service should
                      be deployed and managed
                    type: boolean
                  ipmiImage:
                    type: string
                  networkAttachmentDefinitions:
                    description: NetworkAttachmentDefinitions list of network attachment
                      definitions the service pod gets attached to
                    items:
                      type: string
                    type: array
                  nodeExporterImage:
                    type: string
                  notificationImage:
                    type: string
                  passwordSelector:
                    default:
                      service: CeilometerPassword
                    description: PasswordSelectors - Selectors to identify the service
                      from the Secret
                    properties:
                      aodhService:
                        default: AodhPassword
                        description: AodhService - Selector to get the aodh service
                          password from the Secret
                        type: string
                      database:
                        default: AodhDatabasePassword
                        description: Database - Selector to get the aodh database
                          user password from the Secret
                        type: string
                      service:
                        default: CeilometerPassword
                        description: Service - Selector to get the ceilometer service
                          password from the Secret
                        type: string
                    type: object
                  rabbitMqClusterName:
                    default: rabbitmq
                    description: RabbitMQ instance name Needed to request a transportURL
                      that is created and used in Telemetry
                    type: string
                  secret:
                    description: Secret containing OpenStack password information
                      for ceilometer
                    type: string
                  serviceUser:
                    default: ceilometer
                    description: ServiceUser - optional username used for this service
                      to register in keystone
                    type: string
                  sgCoreImage:
                    type: string
                required:
                - centralImage
                - computeImage
                - ipmiImage
                - nodeExporterImage
                - notificationImage
                - secret
                - sgCoreImage
                type: object
            type: object
          status:
            description: TelemetryStatus defines the observed state of Telemetry
            properties:
              autoscalingReadyCount:
                description: ReadyCount of Autoscaling instance
                format: int32
                type: integer
              ceilometerReadyCount:
                description: ReadyCount of Ceilometer instance
                format: int32
                type: integer
              conditions:
                description: Conditions
                items:
                  description: Condition defines an observation of a API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase.
                      type: string
                    severity:
                      description: Severity provides a classification of Reason code,
                        so the current situation is immediately understandable and
                        could act accordingly. It is meant for situations where Status=False
                        and it should be indicated if it is just informational, warning
                        (next reconciliation might fix it) or an error (e.g. DB create
                        issue and no actions to automatically resolve the issue can/should
                        be done). For conditions where Status=Unknown or Status=True
                        the Severity should be SeverityNone.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase.
                      type: string
                  required:
                  - lastTransitionTime
                  - status
                  - type
                  type: object
                type: array
              hash:
                additionalProperties:
                  type: string
                description: Map of hashes to track e.g. job status
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
