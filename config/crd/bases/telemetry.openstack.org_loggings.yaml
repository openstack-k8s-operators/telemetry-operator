---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: loggings.telemetry.openstack.org
spec:
  group: telemetry.openstack.org
  names:
    kind: Logging
    listKind: LoggingList
    plural: loggings
    singular: logging
  scope: Namespaced
  versions:
  - name: v1beta1
    schema:
      openAPIV3Schema:
        description: Logging is the Schema for the loggings API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: LoggingSpec defines the desired state of Logging
            properties:
              cloNamespace:
                default: openshift-logging
                description: CLONamespace points to the namespace where the cluster-logging-operator
                  is deployed
                type: string
              ipaddr:
                description: IPAddr is the address where the service will listen on
                type: string
              network:
                description: The openstack network that will be used to connect computes
                  nodes
                type: string
              port:
                default: 10514
                description: Port is the port where the service will listen on
                format: int32
                type: integer
              protocol:
                default: TCP
                description: 'The protocol of the connection the Service will listen
                  on: tcp or udp'
                enum:
                - TCP
                - UDP
                type: string
              rsyslogPersistInterval:
                default: 10
                description: The number of seconds between sending log attempts
                format: int32
                type: integer
              rsyslogQueueSize:
                default: 10000
                description: The size of the local queue of logs
                format: int32
                type: integer
              rsyslogQueueType:
                default: linkedList
                description: The type of the local queue of logs
                enum:
                - fixedArray
                - linkedList
                - direct
                - disk
                type: string
              rsyslogRetries:
                default: 100
                description: The number of retries rsyslog will attempt before abandoning
                format: int32
                type: integer
              targetPort:
                default: 10514
                description: TargetPort is the port where the logging syslog receiver
                  is listening
                type: integer
            required:
            - ipaddr
            - network
            - rsyslogQueueType
            type: object
          status:
            description: LoggingStatus defines the observed state of Logging
            properties:
              conditions:
                description: Conditions
                items:
                  description: Condition defines an observation of a API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase.
                      type: string
                    severity:
                      description: Severity provides a classification of Reason code,
                        so the current situation is immediately understandable and
                        could act accordingly. It is meant for situations where Status=False
                        and it should be indicated if it is just informational, warning
                        (next reconciliation might fix it) or an error (e.g. DB create
                        issue and no actions to automatically resolve the issue can/should
                        be done). For conditions where Status=Unknown or Status=True
                        the Severity should be SeverityNone.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase.
                      type: string
                  required:
                  - lastTransitionTime
                  - status
                  - type
                  type: object
                type: array
              hash:
                additionalProperties:
                  type: string
                description: Map of hashes to track e.g. job status
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
